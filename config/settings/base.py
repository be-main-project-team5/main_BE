"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

env_path = BASE_DIR / ".env"
# .env 파일 로드
load_dotenv(dotenv_path=env_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")  # SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS_str = []


# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "drf_spectacular",
    "django_celery_beat",
    "channels",
    "apps.users.apps.UsersConfig",
    "apps.groups.apps.GroupsConfig",
    "apps.idols.apps.IdolsConfig",
    "apps.chats.apps.ChatsConfig",
    "apps.bookmarks.apps.BookmarksConfig",
    "apps.alarms.apps.AlarmsConfig",
    "apps.schedules.apps.SchedulesConfig",
    "apps.admins.apps.AdminsConfig",
    "django_cleanup.apps.CleanupConfig",
    "django_filters",
    "corsheaders",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS

# 알람 발송을 1분 주기로 체크하기 위해 작성
CELERY_BEAT_SCHEDULE = {
    "send_scheduled_alarms": {
        "task": "apps.alarms.tasks.send_scheduled_alarms",  # 실행할 Task 경로
        "schedule": timedelta(minutes=1),  # 1분마다 실행
    },
}


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"
ASGI_APPLICATION = "config.asgi.application"  # ASGI 애플리케이션 설정

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "OPTIONS": {
            "client_encoding": "UTF8",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8,  # 최소 비밀번호 길이
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = "/app/staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "users.CustomUser"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",  # 선택 사항: 세션 인증도 필요하다면
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",  # 기본적으로 인증된 사용자만 접근 허용
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,  # 페이지네이션 기본 크기
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),  # 액세스 토큰 유효 기간
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # 리프레시 토큰 유효 기간
    "ROTATE_REFRESH_TOKENS": True,  # 리프레시 토큰 재사용 시 새 토큰 발급
    "BLACKLIST_AFTER_ROTATION": True,  # 사용된 리프레시 토큰 블랙리스트 처리
    "UPDATE_LAST_LOGIN": False,  # 마지막 로그인 시간 업데이트 여부 (기본값 False 유지)
    "ALGORITHM": "HS256",  # 서명 알고리즘
    "SIGNING_KEY": SECRET_KEY,  # 토큰 서명에 사용될 키 (SECRET_KEY와 동일)
    "VERIFYING_KEY": None,  # 토큰 검증에 사용될 키 (SIGNING_KEY와 동일하면 None)
    "AUDIENCE": None,  # 토큰 수신자
    "ISSUER": None,  # 토큰 발급자
    "JWK_URL": None,  # JWK (JSON Web Key) URL
    "LEEWAY": 0,  # 시간 오차 허용 범위
    "AUTH_HEADER_TYPES": (
        "Bearer",
    ),  # 인증 헤더 타입 (예: Authorization: Bearer <token>)
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",  # 인증 헤더 이름
    "USER_ID_FIELD": "id",  # 사용자 모델에서 사용자 ID로 사용할 필드
    "USER_ID_CLAIM": "user_id",  # JWT 페이로드에서 사용자 ID 클레임 이름
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",  # 토큰 타입 클레임 이름
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",  # JWT ID 클레임 이름
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

# Refresh Token Cookie Settings
REFRESH_TOKEN_COOKIE_SAMESITE = "Lax"

# drf-spectacular 설정 (API 문서화를 위한 설정)
SPECTACULAR_SETTINGS = {
    "TITLE": "DingDing API",  # API 문서의 제목
    "DESCRIPTION": "DingDing Service API Documentation",  # API 문서 설명
    "VERSION": "1.0.0",  # API 버전
    "SERVE_INCLUDE_SCHEMA": True,  # 스키마를 API 엔드포인트로 제공할지 여부
    "COMPONENT_SPLIT_REQUEST": True,  # 컴포넌트를 별도의 요청으로 분할하여 로딩 속도 개선
}


# alarms test를 위한 Redis 브로커 설정
CELERY_BROKER_URL = "redis://localhost:6379/0"  # 로컬 Redis
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"
CELERY_TIMEZONE = "Asia/Seoul"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60

# Kakao Social Login Settings
KAKAO_REST_API_KEY = os.getenv("KAKAO_REST_API_KEY")
KAKAO_REDIRECT_URI = os.getenv("KAKAO_REDIRECT_URI")

# Google Social Login Settings
GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET")
GOOGLE_REDIRECT_URI = os.getenv("GOOGLE_REDIRECT_URI")

# Channel Layers
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [
                (
                    os.getenv("REDIS_HOST", "127.0.0.1"),
                    int(os.getenv("REDIS_PORT", 6380)),
                )
            ],
        },
    },
}

# CORS
DOMAIN_NAME = "api.moyeoradingding.site"
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    f"https://{DOMAIN_NAME}",
    "http://localhost",
    "http://localhost:443",
    "https://main-fe-theta-dev.vercel.app",
    "https://main-ra48950wd-105s-projects-9cf90619.vercel.app",
    "https://www.moyeoradingding.site",
]
CORS_ALLOW_CREDENTIALS = True  # 쿠키를 포함한 요청 허용
CORS_ALLOWED_METHODS = ["GET", "POST", "DELETE", "PUT", "PATCH"]
CORS_ALLOWED_HEADERS = ["Content-Type", "Authorization"]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    f"https://{DOMAIN_NAME}",
    "http://localhost",
    "http://localhost:443",
    "https://main-fe-theta-dev.vercel.app",
    "https://main-ra48950wd-105s-projects-9cf90619.vercel.app",
    "https://www.moyeoradingding.site",
]
CSRF_COOKIE_DOMAIN = f".{DOMAIN_NAME}"

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
