services:
  # Redis 서비스
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6380:6379" # settings.py의 포트(6380)와 맞춤
    volumes:
      - redis-data:/data
    command: redis-server --port 6379
    networks:
      app_network:
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django 애플리케이션 서비스
  django:
    build:
        context: .
        dockerfile: Dockerfile
    container_name: django
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - .:/app  # 개발 시 코드 변경을 즉시 반영하기 위해 사용 (프로덕션에서는 제거 가능)
      - static-:/app/staticfiles  # 정적 파일을 위한 볼륨
      - /app/.venv # - django-venv:/app/.venv  # 가상환경 유지
    env_file:
      - .env
    environment:
      # settings.py에서 사용하는 환경 변수를 여기에 설정합니다.
      - SECRET_KEY=${SECRET_KEY}
      - DJANGO_SETTINGS_MODULE=config.settings.dev
    depends_on:
      redis:
        condition: service_healthy
    networks:
      app_network:
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--database", "default"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
#    command: tail -f /dev/null

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    depends_on:
      django:
        condition: service_healthy
    ports:
      - "80:80"
    volumes:
      - static-:/app/staticfiles:ro
      - ./resources/nginx/nginx-dev.conf:/etc/nginx/conf.d/default.conf
    networks:
      - app_network
    command: nginx -g 'daemon off;' # Nginx 실행만 담당

volumes:
  static-:
  media-:
  redis-data:

networks:
  app_network:
    driver: bridge